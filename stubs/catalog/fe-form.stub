import { ErrorSummary } from '@/components/form/ErrorSummary';
import { Field } from '@/components/form/Field';
import { ActiveField } from '@/components/forms/active-field';
import { FieldError } from '@/components/forms/field-error';
import { FormActions } from '@/components/forms/form-actions';
import { Input } from '@/components/ui/input';
import AppLayout from '@/layouts/app-layout';
import { Head, router, useForm } from '@inertiajs/react';
import React, { useEffect, useRef } from 'react';
import { toast } from 'sonner';

type FormMode = 'create' | 'edit';

interface ModelShape {
  id?: number | string;
{{ fe_form_model_interface_fields }}
  updated_at?: string | null;
}

interface PageProps {
  mode: FormMode;
  model?: ModelShape;
}

export default function FormPage(props: PageProps) {
  const mode: FormMode = props.mode ?? 'create';
  const initial = props.model ?? {};

  const form = useForm({
{{ fe_form_use_form_pairs }}
    _version: mode === 'edit' ? initial.updated_at ?? null : null,
  });

  const breadcrumbs = [
    { title: 'Catálogos', href: '/catalogs' },
    { title: '{{ humanLabelPlural }}', href: '/catalogs/{{ slug }}' },
    { title: mode === 'edit' ? 'Editar' : 'Crear', href: '' },
  ];

  const firstErrorRef = useRef<HTMLInputElement>(null);

  useEffect(() => {
    if (Object.keys(form.errors).length > 0) {
      firstErrorRef.current?.focus();
    }
  }, [form.errors]);

  function handleCancel() {
    router.visit('/catalogs/{{ slug }}', { preserveScroll: true });
  }

  function handleSubmit(e: React.FormEvent) {
    e.preventDefault();

    if (mode === 'create') {
      form.post(route('catalogs.{{ kebab }}.store'));
    } else {
      const id = initial.id;
      if (id === undefined || id === null || String(id) === '') {
        toast.error('ID inválido para editar');
        return;
      }
      form.put(route('catalogs.{{ kebab }}.update', id));
    }
  }

  return (
    <AppLayout breadcrumbs={breadcrumbs}>
      <Head title={mode === 'edit' ? 'Editar {{ humanLabelSingular }}' : 'Crear {{ humanLabelSingular }}'} />
      <div className="min-h-screen bg-gradient-to-br from-gray-50 via-white to-gray-50 dark:from-gray-900 dark:via-gray-950 dark:to-gray-900">
        <div className="py-8">
          <div className="mx-auto max-w-5xl px-4 sm:px-6 lg:px-8">
            <h1 className="mb-4 text-2xl font-bold text-gray-900 dark:text-gray-100">{mode === 'edit' ? 'Editar' : 'Crear'} {{ humanLabelSingular }}</h1>

            <form onSubmit={handleSubmit} className="bg-card space-y-6 rounded-2xl border p-6 shadow-sm lg:p-7">
          {Object.keys(form.errors).length > 0 && <ErrorSummary errors={form.errors} className="mb-2" />}

          <div className="grid gap-4 md:grid-cols-2">
{{ fe_form_inputs }}
          </div>

{{ fe_form_active_block }}

          <p className="text-muted-foreground text-xs">
            <span className="text-destructive">*</span> Campos obligatorios
          </p>

            <FormActions
              onCancel={handleCancel}
              isSubmitting={form.processing}
              isDirty={true}
              submitText={mode === 'create' ? 'Crear' : 'Actualizar'}
            />
          </form>
          </div>
        </div>
      </div>
    </AppLayout>
  );
}
