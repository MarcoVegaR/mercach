import { ConfirmAlert } from '@/components/dialogs/confirm-alert';
import { Badge } from '@/components/ui/badge';
import { Button } from '@/components/ui/button';
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from '@/components/ui/dropdown-menu';
import { Link, router, usePage } from '@inertiajs/react';
import type { ColumnDef } from '@tanstack/react-table';
import { Edit, Eye, MoreHorizontal, Power, Trash2 } from 'lucide-react';
import React from 'react';

export type Row = {
  id: number | string;
{{ fe_columns_row_type_fields }}
  created_at?: string | null;
  [key: string]: unknown;
};

function ActionsCell({ row }: { row: Row }) {
  const { auth } = usePage<{ auth?: { can?: Record<string, boolean> } }>().props;
  const canUpdate = !!auth?.can?.['{{ permPrefix }}.update'];
  const canDelete = !!auth?.can?.['{{ permPrefix }}.delete'];
  const canSetActive = !!auth?.can?.['{{ permPrefix }}.setActive'];

  const [openDelete, setOpenDelete] = React.useState(false);
  const [openToggle, setOpenToggle] = React.useState(false);
  const isActive = !!row.is_active;

  return (
    <>
      <DropdownMenu>
        <DropdownMenuTrigger asChild>
          <Button variant="ghost" className="h-8 w-8 p-0">
            <span className="sr-only">Abrir menú</span>
            <MoreHorizontal className="h-4 w-4" />
          </Button>
        </DropdownMenuTrigger>
        <DropdownMenuContent align="end">
          <DropdownMenuLabel>Acciones</DropdownMenuLabel>
          <DropdownMenuSeparator />
          <DropdownMenuItem asChild>
            <Link href={`/catalogs/{{ slug }}/${row.id}`} className="cursor-pointer">
              <Eye className="mr-2 h-4 w-4" />
              Ver detalles
            </Link>
          </DropdownMenuItem>
          {canUpdate && (
            <DropdownMenuItem asChild>
              <Link href={`/catalogs/{{ slug }}/${row.id}/edit`} className="cursor-pointer">
                <Edit className="mr-2 h-4 w-4" />
                Editar
              </Link>
            </DropdownMenuItem>
          )}
          {canSetActive && (
            <DropdownMenuItem
              onSelect={() => setTimeout(() => setOpenToggle(true), 100)}
              className={isActive ? 'text-amber-600 focus:text-amber-700 dark:text-amber-400 dark:focus:text-amber-300' : 'text-emerald-600 focus:text-emerald-700 dark:text-emerald-400 dark:focus:text-emerald-300'}
            >
              <Power className="mr-2 h-4 w-4" />
              {isActive ? 'Desactivar' : 'Activar'}
            </DropdownMenuItem>
          )}
          {canDelete && (
            <DropdownMenuItem
              onSelect={() => setTimeout(() => setOpenDelete(true), 100)}
              className="text-red-600 focus:text-red-700 dark:text-red-400 dark:focus:text-red-300"
            >
              <Trash2 className="mr-2 h-4 w-4" />
              Eliminar
            </DropdownMenuItem>
          )}
        </DropdownMenuContent>
      </DropdownMenu>

      {/* Confirm delete */}
      <ConfirmAlert
        open={openDelete}
        onOpenChange={setOpenDelete}
        title="Eliminar registro"
        description={`¿Está seguro de eliminar el registro "${ {{ fe_columns_display_expr }} }"? Esta acción no se puede deshacer.`}
        confirmLabel="Eliminar"
        onConfirm={async () => {
          await new Promise<void>((resolve, reject) => {
            router.delete(`/catalogs/{{ slug }}/${row.id}`, {
              preserveState: false,
              preserveScroll: true,
              onSuccess: () => resolve(),
              onError: () => reject(new Error('delete_failed')),
            });
          });
        }}
      />

      {/* Confirm toggle active */}
      <ConfirmAlert
        open={openToggle}
        onOpenChange={setOpenToggle}
        title={isActive ? 'Desactivar' : 'Activar'}
        description={`¿Está seguro de ${isActive ? 'desactivar' : 'activar'} el registro "${ {{ fe_columns_display_expr }} }"?`}
        confirmLabel={isActive ? 'Desactivar' : 'Activar'}
        onConfirm={async () => {
          await new Promise<void>((resolve, reject) => {
            router.patch(`/catalogs/{{ slug }}/${row.id}/active`, { active: !isActive }, {
              preserveState: false,
              preserveScroll: true,
              onSuccess: () => resolve(),
              onError: () => reject(new Error('set_active_failed')),
            });
          });
        }}
      />
    </>
  );
}

export const columns: ColumnDef<Row>[] = [
  { accessorKey: 'id', header: '#', enableSorting: true },
{{ fe_columns_columns }}
  {
    id: 'actions',
    header: 'Acciones',
    enableSorting: false,
    cell: ({ row }) => <ActionsCell row={row.original as Row} />,
  },
];
